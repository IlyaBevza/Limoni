
Функция   ДатаВФорматеEDI(ВходящаяДата) Экспорт
	Возврат Формат(ВходящаяДата, "ДФ=""гггг-ММ-дд""");	
КонецФункции 
Функция СоответствияОтветаСервера() Экспорт
	Соответствие=Новый Соответствие;
	Соответствие.Вставить("00000000",	"Операция успешно завершена");
	Соответствие.Вставить("00000001",		"Ошибка аутентификации"); 
	Соответствие.Вставить("00000002",		"Ошибка во взаимосвязи");
	Соответствие.Вставить("00000003",		"Внешняя ошибка");
	Соответствие.Вставить("00000004",		"Внутренняя ошибка сервера");
	Соответствие.Вставить("00000005",		"Превышен таймаут на выполнение метода");
	Соответствие.Вставить("00000006",		"Ошибка Web");
	Соответствие.Вставить("00000007",		"Некорректные параметры");
	Возврат Соответствие;
КонецФункции
Функция   СтатусБезОшибок()
	Возврат "00000000";	
КонецФункции
Функция   ПроксиCommarch() Экспорт
	Попытка
		Прокси=WSСсылки.Comarch.СоздатьWSПрокси("http://www.comarch.com/","EDIWebService","EDIWebServiceSoap");		
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	Возврат Прокси;	
КонецФункции
Функция   ВзаимосвязиCommarch(Логин,Пароль,ВыводитьВсеСообщенияОПодключении=Неопределено) Экспорт
	Прокси=ПроксиCommarch();
	Если Прокси=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ОтветСервера=Прокси.Relationships(Логин,Пароль,0);
	Если НЕ ОтветСервера.Res=СтатусБезОшибок() Тогда
		Сообщить(СоответствияОтветаСервера().Получить(ОтветСервера.Res));
		Возврат Неопределено;
	Иначе
		Если ВыводитьВсеСообщенияОПодключении=Истина Тогда	
			Сообщить("Соединение с вебсервисом установлено");
		КонецЕсли;		
	КонецЕсли;
	Чтение=Новый ЧтениеXML;
	Попытка
		Чтение.УстановитьСтроку(ОтветСервера.Cnt);
		Чтение.Прочитать();
	Исключение
		Сообщить("Ошибка при чтении строки XML! " + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Внимание);
		Чтение.Закрыть();
		Возврат Неопределено;
	КонецПопытки;
	МассивДанных=Новый Массив;
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента И Чтение.Имя="relation" Тогда
			ДанныеДляДобавления=Новый Структура("ВидДокумента,PartnerName,GLN,DocumentVersion,DocumentStandard,DocumentTest,Test");
			Пока Чтение.Прочитать() Цикл
				Если Чтение.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда 
					Если Чтение.Имя="partner-iln" Тогда
						Чтение.Прочитать();
						ДанныеДляДобавления.GLN=Чтение.Значение;
					ИначеЕсли Чтение.Имя="partner-name" Тогда
						Чтение.Прочитать();
						ДанныеДляДобавления.PartnerName=Чтение.Значение;
					ИначеЕсли  Чтение.Имя="document-type" Тогда
						Чтение.Прочитать();
						ДанныеДляДобавления.ВидДокумента=Перечисления.ИБ_ВидыДокументовEDI[Чтение.Значение];
					ИначеЕсли Чтение.Имя="document-version" Тогда
						Чтение.Прочитать();
						ДанныеДляДобавления.DocumentVersion=Чтение.Значение;
					ИначеЕсли Чтение.Имя="document-standard" Тогда
						Чтение.Прочитать();
						ДанныеДляДобавления.DocumentStandard=Чтение.Значение;
					ИначеЕсли Чтение.Имя="document-test" Тогда
						Чтение.Прочитать();
						ДанныеДляДобавления.DocumentTest=Чтение.Значение;
					ИначеЕсли Чтение.Имя="test" Тогда
						Чтение.Прочитать();
						ДанныеДляДобавления.Test=Чтение.Значение;
						МассивДанных.Добавить(ДанныеДляДобавления);
						Прервать;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Если МассивДанных.Количество()=0 Тогда 
		Сообщить("Не найдено ни одного контрагента, с которым осуществоляетсяэлектронный документооборот");
		Возврат Неопределено;
	КонецЕсли;	
	Возврат МассивДанных;	
КонецФункции
Функция СтруктураПараметровВзаимодействия()
	Структ=Новый Структура;
	Структ.Вставить("DocumentVersion","document-version");
	Структ.Вставить("DocumentStandard","document-standard");
	Структ.Вставить("DocumentTest","document-test");
	Структ.Вставить("Test","test");
	Возврат Структ;
КонецФункции
Процедура ЗаполнитьСвязиCommarch(Логин,Пароль,ВыводитьВсеСообщенияОПодключении=Неопределено) Экспорт
	
	МассивДанных=ВзаимосвязиCommarch(Логин,Пароль,ВыводитьВсеСообщенияОПодключении);
	Если МассивДанных=Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтруктураПараметров=СтруктураПараметровВзаимодействия();
	Для Каждого ЭлементМассива ИЗ МассивДанных Цикл
		КонтрагентEDI=Справочники.ИБ_КонтрагентыEDI.НайтиПоРеквизиту("GLN",ЭлементМассива.GLN);
		Если  КонтрагентEDI.Пустая() Тогда 
			КонтрагентEDI=СоздатьНовогоКонтрагентаEDI(ЭлементМассива.PartnerName,ЭлементМассива.GLN);
		КонецЕсли;
		НаборЗаписей=РегистрыСведений.ИБ_ВзаимоотношенияEDI.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.КонтрагентEDI.Установить(КонтрагентEDI);
		НаборЗаписей.Отбор.ВидДокументов.Установить(ЭлементМассива.ВидДокумента);
		НоваяЗапись=НаборЗаписей.Добавить();
		НоваяЗапись.КонтрагентEDI=КонтрагентEDI;
		НоваяЗапись.ВидДокументов=ЭлементМассива.ВидДокумента;
		Для Каждого КлючЗначение ИЗ СтруктураПараметров Цикл
			НоваяЗапись[КлючЗначение.Ключ]=ЭлементМассива[КлючЗначение.Ключ];
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры
Функция СоздатьНовогоКонтрагентаEDI(ИмяНовгоКонтрагента,GLN)
	НовыйКонтрагент=Справочники.ИБ_КонтрагентыEDI.СоздатьЭлемент();
	НовыйКонтрагент.Наименование=ИмяНовгоКонтрагента;
	НовыйКонтрагент.GLN=GLN;
	НовыйКонтрагент.Записать();
	Возврат НовыйКонтрагент.Ссылка;
КонецФункции

#Область  ОБЩИЕ_НАСТРОЙКИ
Функция ПолучитьУзелДерева(СтрокаДерева, ТипУзла, ИмяПоля)
	
	Если ТипУзла = "Строка" Тогда
		xmlУзел = СтрокаДерева.Найти(ИмяПоля, "Элемент", Ложь);
	ИначеЕсли ТипУзла = "Массив" Тогда
		xmlУзел = СтрокаДерева.НайтиСтроки(Новый Структура("Элемент", ИмяПоля), Ложь);
	Иначе
		xmlУзел = Неопределено;
	КонецЕсли;
	
	Возврат xmlУзел;
	
КонецФункции
Функция ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, ИмяПоля, Обязательное)
	
	xmlЗначение = СтрокаДерева.Найти(ИмяПоля, "Элемент", Ложь);
	
	Если xmlЗначение = Неопределено Тогда
		
		Если Обязательное Тогда
			Сообщить("В файле не найдено обязательное поле """ + ИмяПоля + """", СтатусСообщения.ОченьВажное);
		КонецЕсли;
		
		Возврат Неопределено;
		
	Иначе
		
		ТекстовоеЗначение = xmlЗначение.Текст;
		
		Если Не ЗначениеЗаполнено(ТекстовоеЗначение) Тогда
			
			Если Обязательное Тогда
				Сообщить("Не заполнено обязательное поле """ + ИмяПоля + """", СтатусСообщения.Важное);
			КонецЕсли;
			
			Возврат Неопределено;
			
		Иначе
			
			Возврат ТекстовоеЗначение;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции
Процедура Рекурсия(СтрокаДерева, Чтение)
	
	АтрибутыСоответствие = Новый Соответствие();
	Пока Чтение.ПрочитатьАтрибут() Цикл
		АтрибутыСоответствие.Вставить(Чтение.Имя, Чтение.Значение);
	КонецЦикла;
	Если АтрибутыСоответствие.Количество() > 0 Тогда
		СтрокаДерева.Атрибуты = АтрибутыСоответствие;
	Иначе
		АтрибутыСоответствие = 0;
	КонецЕсли;
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
			СтрокаДерева.Текст = Чтение.Значение;
		ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Дочерний         = СтрокаДерева.Строки.Добавить();
			Дочерний.Элемент = Чтение.Имя;
			Рекурсия(Дочерний, Чтение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
Функция ПолучитьВалюту(xmlВалюта)
	
	Если xmlВалюта = "RUB" или xmlВалюта = "0" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(643);
	ИначеЕсли xmlВалюта = "USD" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(840);
	ИначеЕсли xmlВалюта = "EUR" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(978);
	ИначеЕсли xmlВалюта = "CNY" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(156);
	ИначеЕсли xmlВалюта = "TWD" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(901);
	Иначе
		Возврат Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#Область  ФОРМИРОВАНИЕ_ЗАКАЗОВ_КЛИЕНТОВ
// Получить структуру Заказа Покупателя
Функция ПолучитьСтруктуруДокумента_ORDER_ECOD(Дерево,ПоставщикСхемы)
	//Рив Гош
	Если ПоставщикСхемы=Справочники.ИБ_КонтрагентыEDI.НайтиПоРеквизиту("GLN","4620008489995")  Тогда
		Возврат СтруктураЗаказаРивГош(Дерево);
		//Атак		 
	ИначеЕсли ПоставщикСхемы=Справочники.ИБ_КонтрагентыEDI.НайтиПоРеквизиту("GLN","4660000949998") Тогда
		Возврат СтруктураЗаказаАшан(Дерево);
	Иначе
		// по умолчанию используется схема РивГош
		Возврат СтруктураЗаказаРивГош(Дерево);
	КонецЕсли;
КонецФункции
// Читает полученную строку XML в формате ECOD (из Web-сервиса)
Функция СформироватьЗаказПокупателяECODИзСтрокиXML(СтрокаXML,GLNКонтрагента) Экспорт
	ПоставщикСхемы=Справочники.ИБ_КонтрагентыEDI.НайтиПоРеквизиту("GLN",GLNКонтрагента);
	Если ПоставщикСхемы=Неопределено Тогда
		Сообщить("Не удалось определить контрагента, имеющего GLN "+GLNКонтрагента);
		Возврат Неопределено;
	КонецЕсли;
	
	Чтение = Новый ЧтениеXML;
	ДеревоЗначений = Новый ДеревоЗначений();
	Попытка
		Чтение.УстановитьСтроку(СтрокаXML);
		Чтение.Прочитать();
	Исключение
		Сообщить("Ошибка при чтении строки XML! " + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Внимание);
		Чтение.Закрыть();
	КонецПопытки;
	
	ДеревоЗначений.Колонки.Добавить("Элемент");
	ДеревоЗначений.Колонки.Добавить("Текст");
	Корень         = ДеревоЗначений.Строки.Добавить();
	Корень.Элемент = Чтение.Имя;
	Рекурсия(Корень, Чтение);
	Дерево = ДеревоЗначений;
	
	Чтение.Закрыть();
	
	Возврат  ПолучитьСтруктуруДокумента_ORDER_ECOD(Дерево,ПоставщикСхемы);
	
КонецФункции

Функция   СтруктураЗаказаРивГош(Дерево)
	СтруктураДокумента=Новый Структура;
	
	
	Узел = ПолучитьУзелДерева(Дерево.Строки, "Строка", "Document-Order");
	Если НЕ Узел = Неопределено Тогда
		СтрокаКорня = Узел.Строки;
	Иначе
		Сообщить("Файл не является Заказом покупателя!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// I. Order-Header (из корня)
	
	Узел = ПолучитьУзелДерева(СтрокаКорня, "Строка", "Order-Header");
	Если НЕ Узел = Неопределено Тогда
		СтрокаДерева = Узел.Строки;
	Иначе
		Сообщить("Не найдена шапка документа!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// Номер документа
	ТекущееЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "OrderNumber", Истина);
	Если НЕ ТекущееЗначение = Неопределено Тогда
		СтруктураДокумента.Вставить("НомерДокумента", СокрЛП(ТекущееЗначение));
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	// Номер договора
	ТекущееЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ContractNumber", Ложь);
	Если НЕ ТекущееЗначение = Неопределено Тогда
		СтруктураДокумента.Вставить("НомерДоговора", СокрЛП(ТекущееЗначение));
	КонецЕсли;
	
	
	//  Дата Документа
	ТекущееЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "OrderDate", Истина);
	Если НЕ ТекущееЗначение = Неопределено Тогда
		СтруктураДокумента.Вставить("ДатаДокумента", Дата(Прав(СокрЛП(ТекущееЗначение),2)+"."+Сред(СокрЛП(ТекущееЗначение),6,2)+"."+Лев(СокрЛП(ТекущееЗначение),4)+" 0:00:00"));
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Дата Поставки(обязательное поле)
	xmlДатаПоставки = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ExpectedDeliveryDate", Истина);
	Если НЕ xmlДатапоставки = Неопределено Тогда
		ДатаПоставки = Дата(Прав(СокрЛП(xmlДатаПоставки),2)+"."+Сред(СокрЛП(xmlДатаПоставки),6,2)+"."+Лев(СокрЛП(xmlДатаПоставки),4)+" 0:00:00");
		СтруктураДокумента.Вставить("ДатаПоставки", ДатаПоставки);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Время Поставки(опциональное поле)
	xmlВремяПоставки = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ExpectedDeliveryTime", Ложь);
	Если НЕ xmlВремяПоставки = Неопределено Тогда
		СтруктураДокумента.Вставить("ВремяПоставки", xmlВремяПоставки);
	Иначе
		СтруктураДокумента.Вставить("ВремяПоставки", "00:00");
	КонецЕсли;
	
	// Валюта(опциональное поле)
	xmlВалюта = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "Currency", Ложь);
	Если НЕ xmlВалюта = Неопределено Тогда
		СтруктураДокумента.Вставить("Валюта", ПолучитьВалюту(xmlВалюта));
	КонецЕсли;
	
	
	// Обозначение Документа(опциональное поле)
	xmlОбозначениеДокумента = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DocumentFunctionCode", Ложь);
	Если НЕ xmlОбозначениеДокумента = Неопределено Тогда
		СтруктураДокумента.Вставить("ОбозначениеДокумента", СокрЛП(xmlОбозначениеДокумента));
	КонецЕсли;
	
	
	// Свободный текст(опциональное поле)
	xmlСвободныйТекст = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "Remarks", Ложь);
	Если НЕ xmlСвободныйТекст = Неопределено Тогда
		СтруктураДокумента.Вставить("СвободныйТекст", СокрЛП(xmlСвободныйТекст));
	КонецЕсли;
	
	// II. Order-Summary (из корня)
	Узел = ПолучитьУзелДерева(СтрокаКорня, "Строка", "Order-Summary");
	Если НЕ Узел = Неопределено Тогда
		СтрокаДерева = Узел.Строки;
	Иначе
		Сообщить("Не найдены реквизиты табличной части!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// Количество Строк(опциональное поле)
	xmlКоличествоСтрок = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "TotalLines", Ложь);
	Если НЕ xmlКоличествоСтрок = Неопределено Тогда
		СтруктураДокумента.Вставить("КоличествоСтрок", Число(СокрЛП(xmlКоличествоСтрок)));
	КонецЕсли;
	
	// Общая Общее заказанное количество(контрольная сумма)(опциональное поле)
	xmlОбщаяСумма = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "TotalOrderedAmount", Ложь);
	Если НЕ xmlОбщаяСумма = Неопределено Тогда
		СтруктураДокумента.Вставить("ОбщееКоличество", Число(СокрЛП(xmlОбщаяСумма)));
	КонецЕсли;
	// Сумма заказа (опциональное поле)
	xmlОбщаяСумма = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "TotalNetAmount", Ложь);
	Если НЕ xmlОбщаяСумма = Неопределено Тогда
		СтруктураДокумента.Вставить("ОбщаяСумма", Число(СокрЛП(xmlОбщаяСумма)));
	КонецЕсли;
	
	
	// III. Order-Parties (из корня)
	Узел = ПолучитьУзелДерева(СтрокаКорня, "Строка", "Order-Parties");
	Если НЕ Узел = Неопределено Тогда
		СтрокаУровня = Узел.Строки;
	Иначе
		Сообщить("Не найдены реквизиты покупателя!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	Узел = ПолучитьУзелДерева(СтрокаУровня, "Строка", "Buyer");
	Если НЕ Узел = Неопределено Тогда
		СтрокаДерева = Узел.Строки;
	Иначе
		Сообщить("Не найдены реквизиты покупателя!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// Поставщик(Организация)(обязательное поле)
	ТекЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ILN", Истина);
	Если НЕ ТекЗначение = Неопределено Тогда
		СтруктураДокумента.Вставить("КонтрагентGLN", СокрЛП(ТекЗначение));
	КонецЕсли;
	
	Узел = ПолучитьУзелДерева(СтрокаУровня, "Строка", "Seller");
	Если НЕ Узел = Неопределено Тогда
		СтрокаДерева = Узел.Строки;
	Иначе
		Сообщить("Не найдены реквизиты продавца!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// Покупатель(контрагент)(обязательное поле)
	ТекЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ILN", Истина);
	Если НЕ ТекЗначение = Неопределено Тогда
		СтруктураДокумента.Вставить("ПоставщикGLN", СокрЛП(ТекЗначение));
	КонецЕсли;
	
	Узел = ПолучитьУзелДерева(СтрокаУровня, "Строка", "DeliveryPoint");
	Если НЕ Узел = Неопределено Тогда
		СтрокаДерева = Узел.Строки;
	Иначе
		Сообщить("Не найдены реквизиты точки доставки!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// Точка доставки (ДоговорКонтрагента)(опциональное поле)
	xmlТочкаДоставкиGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ILN", Ложь);
	Если НЕ xmlТочкаДоставкиGLN = Неопределено Тогда
		СтруктураДокумента.Вставить("ТочкаДоставкиGLN", СокрЛП(xmlТочкаДоставкиGLN));
	КонецЕсли;
	
	//GLN, кому выставляется счет (обязательное поле)
	Узел= ПолучитьУзелДерева(СтрокаУровня, "Строка", "Invoicee");
	Если НЕ Узел = Неопределено Тогда
		СтрокаДерева = Узел.Строки;
		xmlПолучательСчёта=ПолучитьЗначениеВСтрокеДерева(СтрокаДерева,"ILN",Истина);
		Если НЕ xmlПолучательСчёта=Неопределено Тогда
			СтруктураДокумента.Вставить("ПолучательСчетаGLN",СокрЛП(xmlПолучательСчёта));
		КонецЕсли;
	Иначе
		//Сообщить("Не найдены реквизиты получателя счёта!", СтатусСообщения.Важное);
		//Возврат Неопределено;
	КонецЕсли;
	
	
	Узел= ПолучитьУзелДерева(СтрокаУровня, "Строка", "UltimateCustomer");
	Если НЕ Узел = Неопределено Тогда
		СтрокаДерева = Узел.Строки;
		// GLN розничной точки доставки
		xmlРозничнаяТочкаGLN=ПолучитьЗначениеВСтрокеДерева(СтрокаДерева,"ILN",Ложь);
		Если НЕ xmlРозничнаяТочкаGLN=Неопределено Тогда
			СтруктураДокумента.Вставить("РозничнаяТочкаGLN",СокрЛП(xmlРозничнаяТочкаGLN));
		КонецЕсли;
		// Код зоны консолидации
		xmlIdentificationСode=ПолучитьЗначениеВСтрокеДерева(СтрокаДерева,"ILN",Ложь);
		Если НЕ xmlIdentificationСode=Неопределено Тогда
			СтруктураДокумента.Вставить("КодЗоныКонсолидации",СокрЛП(xmlIdentificationСode));
		КонецЕсли;	
		
	КонецЕсли;
	// IV. Табличная часть
	// Order-Lines (из корня)
	Узел = ПолучитьУзелДерева(СтрокаКорня, "Строка", "Order-Lines");
	Если НЕ Узел = Неопределено Тогда
		СтрокаУровня = Узел.Строки;
	Иначе
		#Если Клиент Тогда
			Сообщить("Не найдена табличная часть!", СтатусСообщения.Важное);
		#КонецЕсли
		Возврат Ложь;
	КонецЕсли;
	
	// Создаем таблицуЗначений, в которую выгружаем табличную часть документа
	ДокументТЧ = Новый ТаблицаЗначений;
	ДокументТЧ.Колонки.Добавить("НомерСтрокиТЧ");
	ДокументТЧ.Колонки.Добавить("ШтрихКод");
	ДокументТЧ.Колонки.Добавить("КодПокупателя");
	ДокументТЧ.Колонки.Добавить("НоменклатураНаименование");
	ДокументТЧ.Колонки.Добавить("КоличествоВУпаковке");
	ДокументТЧ.Колонки.Добавить("Количество");
	ДокументТЧ.Колонки.Добавить("ЕдиницаИзмерения");
	ДокументТЧ.Колонки.Добавить("ЦенаСНДС");
	ДокументТЧ.Колонки.Добавить("Цена");
	ДокументТЧ.Колонки.Добавить("СуммаБезНДС");
	ДокументТЧ.Колонки.Добавить("Сумма");
	ДокументТЧ.Колонки.Добавить("ЦенаСУчетомСкидок");
	ДокументТЧ.Колонки.Добавить("Коэффициент");
	
	ТабличнаяЧасть = ПолучитьУзелДерева(СтрокаУровня, "Массив", "Line");
	
	Для Каждого Узел ИЗ ТабличнаяЧасть Цикл
		
		Если НЕ Узел = Неопределено Тогда
			СтрокаДерева = Узел.Строки;
		Иначе
			Сообщить("Не найдены строки табличной части!", СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецЕсли;
		
		Узел = ПолучитьУзелДерева(СтрокаДерева, "Строка", "Line-Item");
		
		Если НЕ Узел = Неопределено Тогда
			СтрокаДерева = Узел.Строки;
		Иначе
			Сообщить("Не найдена строка табличной части!", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТЧ = ДокументТЧ.Добавить();
		
		//Номер строки (этот параметр при создании заказа не используется, может быть проверочным)
		ПолученноеЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "LineNumber", Истина);
		Если НЕ ПолученноеЗначение = Неопределено Тогда
			НоваяСтрокаТЧ.НомерСтрокиТЧ = Число(ПолученноеЗначение);
		КонецЕсли;
		
		// Определяем атрибуты номенклатуры:
		// Штрих - код номенклатуры
		ПолученноеЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "EAN", Истина);
		Если НЕ ПолученноеЗначение = Неопределено Тогда
			НоваяСтрокаТЧ.ШтрихКод = СокрЛП(ПолученноеЗначение);
		КонецЕсли;
		
		// Код поставщика(поле поиска)
		ПолученноеЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "BuyerItemCode", Ложь);
		Если НЕ ПолученноеЗначение = Неопределено Тогда
			НоваяСтрокаТЧ.КодПокупателя = СокрЛП(ПолученноеЗначение);
		КонецЕсли;
		
		// Наименование номенклатуры(опциональное поле)
		ПолученноеЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ItemDescription", Ложь);
		Если НЕ ПолученноеЗначение = Неопределено Тогда
			НоваяСтрокаТЧ.НоменклатураНаименование = СокрЛП(ПолученноеЗначение);
		КонецЕсли;
		
		ПолученноеЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "OrderedQuantity", Истина);
		Если НЕ ПолученноеЗначение = Неопределено Тогда
			Попытка
				НоваяСтрокаТЧ.Количество = Число(ПолученноеЗначение);
			Исключение
				Сообщить("Не определил количество!", СтатусСообщения.Важное);
				НоваяСтрокаТЧ.Количество = 0;
			КонецПопытки;
		КонецЕсли;
		// Количество штук в продаваемой единице
		ПолученноеЗначение=ПолучитьЗначениеВСтрокеДерева(СтрокаДерева,"OrderedUnitPacksize",Ложь);
		Если НЕ ПолученноеЗначение = Неопределено Тогда
			НоваяСтрокаТЧ.КоличествоВУпаковке = Число(ПолученноеЗначение);
		Иначе 
			НоваяСтрокаТЧ.КоличествоВУпаковке = 1;
		КонецЕсли;
		
		// Единица измерения:"PCE" - штука (значение по умолчанию) "KGM" – килограмм
		ПолученноеЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "UnitOfMeasure", Истина);
		Если НЕ ПолученноеЗначение = Неопределено Тогда
			НоваяСтрокаТЧ.ЕдиницаИзмерения = СокрЛП(ПолученноеЗначение);
		КонецЕсли;
		
		// Цена товара с НДС
		ПолученноеЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "OrderedUnitGrossPrice", Ложь);
		Если НЕ ПолученноеЗначение = Неопределено Тогда
			НоваяСтрокаТЧ.ЦенаСНДС = Число(ПолученноеЗначение);
		КонецЕсли;
		// Цена товара без НДС
		ПолученноеЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "OrderedUnitNetPrice", Ложь);
		Если НЕ ПолученноеЗначение = Неопределено Тогда
			НоваяСтрокаТЧ.Цена = Число(ПолученноеЗначение);
		Иначе
			НоваяСтрокаТЧ.Цена=0;
		КонецЕсли;
		// Сумма  без НДС
		ПолученноеЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "NetAmount", Ложь);
		Если НЕ ПолученноеЗначение = Неопределено Тогда
			НоваяСтрокаТЧ.СуммаБезНДС = Число(ПолученноеЗначение);
		Иначе
			НоваяСтрокаТЧ.СуммаБезНДС=0;
		КонецЕсли;
		// Сумма
		ПолученноеЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "GrossAmount", Ложь);
		Если НЕ НоваяСтрокаТЧ.Цена = Неопределено Тогда
			НоваяСтрокаТЧ.Сумма = Число(ПолученноеЗначение);
		Иначе
			НоваяСтрокаТЧ.Сумма=0;
		КонецЕсли;
		// Цена товара без НДС с учетом скидок
		ПолученноеЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "OrderedUnitListPrice", Ложь);
		Если НЕ ПолученноеЗначение = Неопределено Тогда
			НоваяСтрокаТЧ.ЦенаСУчетомСкидок = Число(ПолученноеЗначение);
		Иначе
			НоваяСтрокаТЧ.ЦенаСУчетомСкидок=0;
		КонецЕсли;
		
		НоваяСтрокаТЧ.Коэффициент = 1;
		
	КонецЦикла;
	
	СтруктураДокумента.Вставить("ДокументТЧ", ДокументТЧ);
	
	Возврат СтруктураДокумента;
	
КонецФункции

Функция   СтруктураЗаказаАшан(Дерево)
	СтруктураДокумента=Новый Структура;
	
	
	Узел = ПолучитьУзелДерева(Дерево.Строки, "Строка", "Document-Order");
	Если НЕ Узел = Неопределено Тогда
		СтрокаКорня = Узел.Строки;
	Иначе
		Сообщить("Файл не является Заказом покупателя!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// I. Order-Header (из корня)
	
	Узел = ПолучитьУзелДерева(СтрокаКорня, "Строка", "Order-Header");
	Если НЕ Узел = Неопределено Тогда
		СтрокаДерева = Узел.Строки;
	Иначе
		Сообщить("Не найдена шапка документа!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// Номер документа
	xmlНомерДокумента = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "OrderNumber", Истина);
	Если НЕ xmlНомерДокумента = Неопределено Тогда
		СтруктураДокумента.Вставить("НомерДокумента", СокрЛП(xmlНомерДокумента));
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	//  Дата Документа
	xmlДатаДокумента = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "OrderDate", Истина);
	Если НЕ xmlДатаДокумента = Неопределено Тогда
		СтруктураДокумента.Вставить("ДатаДокумента", Дата(Прав(СокрЛП(xmlДатаДокумента),2)+"."+Сред(СокрЛП(xmlДатаДокумента),6,2)+"."+Лев(СокрЛП(xmlДатаДокумента),4)+" 0:00:00"));
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Дата Поставки(обязательное поле)
	xmlДатаПоставки = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ExpectedDeliveryDate", Истина);
	Если НЕ xmlДатапоставки = Неопределено Тогда
		ДатаПоставки = Дата(Прав(СокрЛП(xmlДатаПоставки),2)+"."+Сред(СокрЛП(xmlДатаПоставки),6,2)+"."+Лев(СокрЛП(xmlДатаПоставки),4)+" 0:00:00");
		СтруктураДокумента.Вставить("ДатаПоставки", ДатаПоставки);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Тип документа (обязательное поле)  Тип документа: O-оригинал, 
	//R-замена/коррекция, C-отмена, P-предложение, D-удаление,A-подтверждение
	ПолученноеЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "DocumentFunctionCode", Истина);
	Если НЕ ПолученноеЗначение = Неопределено Тогда
		СтруктураДокумента.Вставить("ТипДокумента", ПолученноеЗначение);
	Иначе
		СтруктураДокумента.Вставить("ТипДокумента", "O");
	КонецЕсли;
	//Код типа поставки (обязательное поле)
	ПолученноеЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "FlowType", Истина);
	Если НЕ ПолученноеЗначение = Неопределено Тогда
		СтруктураДокумента.Вставить("КодТипаПоставки", ПолученноеЗначение);
	Иначе
		СтруктураДокумента.Вставить("КодТипаПоставки", "TR");
	КонецЕсли;
	// Свободный текст(опциональное поле)
	xmlСвободныйТекст = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "Remarks", Ложь);
	Если НЕ xmlСвободныйТекст = Неопределено Тогда
		СтруктураДокумента.Вставить("СвободныйТекст", СокрЛП(xmlСвободныйТекст));
	КонецЕсли;
	
	// II. Order-Summary (из корня)
	Узел = ПолучитьУзелДерева(СтрокаКорня, "Строка", "Order-Summary");
	Если НЕ Узел = Неопределено Тогда
		СтрокаДерева = Узел.Строки;
	Иначе
		Сообщить("Не найдены реквизиты табличной части!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// Количество Строк(обязательное поле)
	xmlКоличествоСтрок = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "TotalLines", Истина);
	Если НЕ xmlКоличествоСтрок = Неопределено Тогда
		СтруктураДокумента.Вставить("КоличествоСтрок", СокрЛП(xmlКоличествоСтрок));
	Иначе 
		Сообщить("Не удалось определить количество строк в  документе");
		Возврат Неопределено;
	КонецЕсли;
	
	// Общая Общее заказанное количество(контрольная сумма)(обязательное поле)
	xmlОбщаяСумма = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "TotalOrderedAmount", Истина);
	Если НЕ xmlОбщаяСумма = Неопределено Тогда
		СтруктураДокумента.Вставить("ОбщееКоличество", СокрЛП(xmlОбщаяСумма));
	Иначе 
		Сообщить("Не удалось определить общее заказанное  количество");
		Возврат Неопределено;
	КонецЕсли;
	
	
	// III. Order-Parties (из корня)
	Узел = ПолучитьУзелДерева(СтрокаКорня, "Строка", "Order-Parties");
	Если НЕ Узел = Неопределено Тогда
		СтрокаУровня = Узел.Строки;
	Иначе
		Сообщить("Не найдены реквизиты покупателя!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	Узел = ПолучитьУзелДерева(СтрокаУровня, "Строка", "Buyer");
	Если НЕ Узел = Неопределено Тогда
		СтрокаДерева = Узел.Строки;
	Иначе
		Сообщить("Не найдены реквизиты покупателя!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// Поставщик(Организация)(обязательное поле)
	xmlПоставщикGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ILN", Истина);
	Если НЕ xmlПоставщикGLN = Неопределено Тогда
		СтруктураДокумента.Вставить("ПоставщикGLN", СокрЛП(xmlПоставщикGLN));
	КонецЕсли;
	
	Узел = ПолучитьУзелДерева(СтрокаУровня, "Строка", "Seller");
	Если НЕ Узел = Неопределено Тогда
		СтрокаДерева = Узел.Строки;
	Иначе
		Сообщить("Не найдены реквизиты продавца!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// Покупатель(контрагент)(обязательное поле)
	xmlКонтрагентGLN = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ILN", Истина);
	Если НЕ xmlКонтрагентGLN = Неопределено Тогда
		СтруктураДокумента.Вставить("КонтрагентGLN", СокрЛП(xmlКонтрагентGLN));
	КонецЕсли;
	//Код продавца в системе покупателя (опциональное поле)
	ПолученноеЗначение=ПолучитьЗначениеВСтрокеДерева(СтрокаДерева,"CodeByBuyer",Ложь);
	Если НЕ ПолученноеЗначение = Неопределено Тогда
		СтруктураДокумента.Вставить("КодПродавцаУПокупателя", СокрЛП(ПолученноеЗначение));
	КонецЕсли;
	
	
	Узел = ПолучитьУзелДерева(СтрокаУровня, "Строка", "DeliveryPoint");
	Если НЕ Узел = Неопределено Тогда
		СтрокаДерева = Узел.Строки;
	Иначе
		Сообщить("Не найдены реквизиты точки доставки!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// IV. Табличная часть
	// Order-Lines (из корня)
	Узел = ПолучитьУзелДерева(СтрокаКорня, "Строка", "Order-Lines");
	Если НЕ Узел = Неопределено Тогда
		СтрокаУровня = Узел.Строки;
	Иначе
		#Если Клиент Тогда
			Сообщить("Не найдена табличная часть!", СтатусСообщения.Важное);
		#КонецЕсли
		Возврат Ложь;
	КонецЕсли;
	
	// Создаем таблицуЗначений, в которую выгружаем табличную часть документа
	ДокументТЧ = Новый ТаблицаЗначений;
	ДокументТЧ.Колонки.Добавить("НомерСтрокиТЧ");
	ДокументТЧ.Колонки.Добавить("ШтрихКод");
	ДокументТЧ.Колонки.Добавить("КодУПокупателя");
	ДокументТЧ.Колонки.Добавить("КодУПоставщика");
	ДокументТЧ.Колонки.Добавить("НоменклатураНаименование");
	ДокументТЧ.Колонки.Добавить("КоличествоВУпаковке");
	ДокументТЧ.Колонки.Добавить("Количество");
	ДокументТЧ.Колонки.Добавить("ЕдиницаИзмерения");
	ДокументТЧ.Колонки.Добавить("ЦенаСНДС");
	ДокументТЧ.Колонки.Добавить("Цена");
	ДокументТЧ.Колонки.Добавить("СуммаБезНДС");
	ДокументТЧ.Колонки.Добавить("Сумма");
	ДокументТЧ.Колонки.Добавить("ЦенаСУчетомСкидок");
	ДокументТЧ.Колонки.Добавить("Коэффициент");
	
	ТабличнаяЧасть = ПолучитьУзелДерева(СтрокаУровня, "Массив", "Line");
	
	Для Каждого Узел ИЗ ТабличнаяЧасть Цикл
		
		Если НЕ Узел = Неопределено Тогда
			СтрокаДерева = Узел.Строки;
		Иначе
			Сообщить("Не найдены строки табличной части!", СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецЕсли;
		
		Узел = ПолучитьУзелДерева(СтрокаДерева, "Строка", "Line-Item");
		
		Если НЕ Узел = Неопределено Тогда
			СтрокаДерева = Узел.Строки;
		Иначе
			Сообщить("Не найдена строка табличной части!", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТЧ = ДокументТЧ.Добавить();
		
		//Номер строки (этот параметр при создании заказа не используется, может быть проверочным)
		ПолученноеЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "LineNumber", Истина);
		Если НЕ ПолученноеЗначение = Неопределено Тогда
			НоваяСтрокаТЧ.НомерСтрокиТЧ = Число(ПолученноеЗначение);
		КонецЕсли;
		
		// Определяем атрибуты номенклатуры:
		// Штрих - код номенклатуры
		ПолученноеЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "EAN", Истина);
		Если НЕ ПолученноеЗначение = Неопределено Тогда
			НоваяСтрокаТЧ.ШтрихКод = СокрЛП(ПолученноеЗначение);
		КонецЕсли;
		
		// Код продукта у покупателя
		ПолученноеЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "BuyerItemCode", Истина);
		Если НЕ ПолученноеЗначение = Неопределено Тогда
			НоваяСтрокаТЧ.КодУПокупателя = СокрЛП(ПолученноеЗначение);
		КонецЕсли;
		// Код продукта у поставщика (опциональное поле)
		ПолученноеЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "SupplierItemCode", Ложь);
		Если НЕ ПолученноеЗначение = Неопределено Тогда
			НоваяСтрокаТЧ.КодУПоставщика = СокрЛП(ПолученноеЗначение);
		КонецЕсли;
		// Наименование номенклатуры(обязательное поле)
		ПолученноеЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "ItemDescription", Истина);
		Если НЕ ПолученноеЗначение = Неопределено Тогда
			НоваяСтрокаТЧ.НоменклатураНаименование = СокрЛП(ПолученноеЗначение);
		КонецЕсли;
		
		ПолученноеЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "OrderedQuantity", Истина);
		Если НЕ ПолученноеЗначение = Неопределено Тогда
			Попытка
				НоваяСтрокаТЧ.Количество = Число(ПолученноеЗначение);
			Исключение
				Сообщить("Не определил количество!", СтатусСообщения.Важное);
				НоваяСтрокаТЧ.Количество = 0;
			КонецПопытки;
		КонецЕсли;
		// Количество штук в продаваемой единице
		ПолученноеЗначение=ПолучитьЗначениеВСтрокеДерева(СтрокаДерева,"OrderedUnitPacksize",Ложь);
		Если НЕ ПолученноеЗначение = Неопределено Тогда
			Попытка
				НоваяСтрокаТЧ.КоличествоВУпаковке = ?(Число(ПолученноеЗначение)=0,1,Число(ПолученноеЗначение));
			Исключение
				НоваяСтрокаТЧ.КоличествоВУпаковке = 1;
			КонецПопытки;
		КонецЕсли;
		
		// Единица измерения:"PCE" - штука (значение по умолчанию) "KGM" – килограмм
		ПолученноеЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "UnitOfMeasure", Истина);
		Если НЕ ПолученноеЗначение = Неопределено Тогда
			НоваяСтрокаТЧ.ЕдиницаИзмерения = СокрЛП(ПолученноеЗначение);
		КонецЕсли;
		// Цена товара без НДС
		ПолученноеЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "OrderedUnitNetPrice", Истина);
		Если НЕ ПолученноеЗначение = Неопределено Тогда
			НоваяСтрокаТЧ.Цена = Число(ПолученноеЗначение);
		КонецЕсли;
		// Цена товара без НДС с учетом скидок
		ПолученноеЗначение = ПолучитьЗначениеВСтрокеДерева(СтрокаДерева, "OrderedUnitListPrice", Ложь);
		Если НЕ НоваяСтрокаТЧ.Цена = Неопределено Тогда
			НоваяСтрокаТЧ.ЦенаСУчетомСкидок = Число(ПолученноеЗначение);
		КонецЕсли;
		
		НоваяСтрокаТЧ.Коэффициент = 1;
		
	КонецЦикла;
	
	СтруктураДокумента.Вставить("ДокументТЧ", ДокументТЧ);
	
	Возврат СтруктураДокумента;
	
КонецФункции

Функция Receive_Commarch(ПараметрыДокумента) Экспорт
	
	Прокси=ПроксиCommarch();
	Если Прокси=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатListMBEx = Прокси.ListMBEx(ПараметрыДокумента.Name, ПараметрыДокумента.Password, ПараметрыДокумента.PartnerIln, 
	ПараметрыДокумента.DocumentType, ПараметрыДокумента.DocumentVersion, ПараметрыДокумента.DocumentStandard, 
	ПараметрыДокумента.DocumentTest, ПараметрыДокумента.DateFrom, ПараметрыДокумента.DateTo, ПараметрыДокумента.ItemFrom, 
	ПараметрыДокумента.ItemTo,ПараметрыДокумента.DocumentStatus, ПараметрыДокумента.Timeout);
	Если  НЕ РезультатListMBEx.Res=СтатусБезОшибок() Тогда 
		Сообщить(СоответствияОтветаСервера().Получить(РезультатListMBEx.Res));
		Возврат Неопределено;
	КонецЕсли;	
	СтрокаДоставки = РезультатListMBEx.Cnt;
	// Теперь соберём массив идентификаторов документов tracking-id
	МассивИдентификаторов = ПолучитьМассивИдентификаторовДокументовECOD(СтрокаДоставки);	
	МассивДанныхДляФормированияЗаказов=Новый Массив;
	// Разберем полученные идентификаторы документов
	Для Каждого Элемент Из МассивИдентификаторов Цикл
		ПараметрыПодключения=Новый Структура;
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыПодключения,ПараметрыДокумента);
		ПараметрыПодключения.Вставить("TrackingId",Элемент);
		
		РезультатReceive = Прокси.Receive(ПараметрыПодключения.Name, ПараметрыПодключения.Password, ПараметрыПодключения.PartnerIln,
		ПараметрыПодключения.DocumentType,ПараметрыПодключения.TrackingId, ПараметрыПодключения.DocumentStandard, 
		ПараметрыПодключения.ChangeDocumentStatus, ПараметрыПодключения.Timeout);
		Если  НЕ РезультатReceive.Res=СтатусБезОшибок() Тогда 
			Сообщить("не удалось получить данные заказа "+Элемент+": "+СоответствияОтветаСервера().Получить(РезультатReceive.Res));
			Продолжить;
		КонецЕсли;
		СтрокаДокументаXML = РезультатReceive.Cnt;							 
		СтруктураПолученногоЗаказа= СформироватьЗаказПокупателяECODИзСтрокиXML(СтрокаДокументаXML,ПараметрыПодключения.PartnerIln);
		Если ТипЗнч(СтруктураПолученногоЗаказа)=Тип("Структура") Тогда
			СтруктураПолученногоЗаказа.Вставить("КонтрагентEDI",ПараметрыПодключения.КонтрагентEDI);
			МассивДанныхДляФормированияЗаказов.Добавить(СтруктураПолученногоЗаказа);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивДанныхДляФормированияЗаказов;
КонецФункции

#КонецОбласти 
Функция ПолучитьМассивИдентификаторовДокументовECOD(СтрокаХML) Экспорт
	
	МассивИдентификаторов = Новый Массив;
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(СтрокаХML);
	Пока Чтение.Прочитать() Цикл
		ИмяУзла = Чтение.Имя;
		Если ИмяУзла <> "tracking-id" Тогда  // Пропускаем все узлы, кроме tracking-id
			Продолжить;
		КонецЕсли;
		Если ИмяУзла = "tracking-id" Тогда
			Чтение.Прочитать();
			Если Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
				МассивИдентификаторов.Добавить(Чтение.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат МассивИдентификаторов;
	
КонецФункции
#Область  ПОДТВЕРЖДЕНИЯ_ОБ_ОТГРУЗКЕ

Функция ОтправитьПодтверждениеОтгрузки(ДокументРеализации,Контрагент) Экспорт
	ТекГЛН=РегистрыСведений.ИБ_СписокGLN.GLNПоКонтрагенту(Контрагент);
	ИспользуемыйПоставщикСхемы=Справочники.ИБ_КонтрагентыEDI.НайтиПоРеквизиту("GLN",ТекГЛН);
	//Рив Гош
	Если ИспользуемыйПоставщикСхемы=Справочники.ИБ_КонтрагентыEDI.НайтиПоРеквизиту("GLN","4620008489995") Тогда
		Возврат ОтправитьПодтверждениеОтгрузкиРивГош(ДокументРеализации );
		//Атак	
	ИначеЕсли ИспользуемыйПоставщикСхемы=Справочники.ИБ_КонтрагентыEDI.НайтиПоРеквизиту("GLN","4660000949998") Тогда
		Возврат ОтправитьПодтверждениеОтгрузкиАшан(ДокументРеализации);
	Иначе
		// по умолчанию используется схема РивГош
		Возврат ОтправитьПодтверждениеОтгрузкиРивГош(ДокументРеализации );
	КонецЕсли;	
КонецФункции

Функция ОтправитьПодтверждениеОтгрузкиРивГош(ДокументРеализации)
	Запрос=Новый Запрос;
	Запрос.Текст=ТекстЗапросаПодтверждениеОтгрузки();
	Запрос.УстановитьПараметр("Ссылка",ДокументРеализации);
	ПакетЗапросов=Запрос.ВыполнитьПакет();
	Если ПакетЗапросов[0].Пустой() Тогда
		Сообщить("Не смог найти у данного документа реализации ссылку на заказ клиента EDI");
		Возврат Неопределено;
	КонецЕсли;
	Если ПакетЗапросов[1].Пустой() Тогда
		Сообщить("Не смог сопоставить строки реализации и заказа клиента EDI");
		Возврат Неопределено;
	КонецЕсли;
	Запись=Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	Запись.ЗаписатьНачалоЭлемента("Document-DespatchAdvice");
	Выборка=ПакетЗапросов[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись.ЗаписатьНачалоЭлемента("DespatchAdvice-Header");
		Запись.ЗаписатьНачалоЭлемента("DespatchAdviceNumber");
		Запись.ЗаписатьТекст(ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(Выборка.DespatchAdviceNumber,Ложь,Истина));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("DespatchAdviceDate");
		Запись.ЗаписатьТекст(Формат(Выборка.DespatchAdviceDate, "ДФ=yyyy-MM-dd"));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("DespatchAdviceTime");
		Запись.ЗаписатьТекст(Формат(Выборка.DespatchAdviceDate, "ДФ=hh:mm"));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("EstimatedDeliveryDate");
		Запись.ЗаписатьТекст(Формат(Выборка.EstimatedDeliveryDate, "ДФ=yyyy-MM-dd"));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("BuyerOrderNumber");
		Запись.ЗаписатьТекст(Выборка.BuyerOrderNumber);
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("BuyerOrderDate");
		Запись.ЗаписатьТекст(Формат(Выборка.BuyerOrderDate, "ДФ=yyyy-MM-dd"));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("Currency");
		Запись.ЗаписатьТекст(Выборка.Валюта);
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("DespatchAdvice-Parties");
		Запись.ЗаписатьНачалоЭлемента("Buyer");
		Запись.ЗаписатьНачалоЭлемента("ILN");
		Запись.ЗаписатьТекст(Выборка.ПокупательGLN);
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("Seller");
		Запись.ЗаписатьНачалоЭлемента("ILN");
		Запись.ЗаписатьТекст(Выборка.ПоставщикGLN);
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("DeliveryPoint");
		Запись.ЗаписатьНачалоЭлемента("ILN");
		Запись.ЗаписатьТекст(Выборка.МестоДоставкиGLN);
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();
		//Запись.ЗаписатьНачалоЭлемента("DespatchAdvice-Consignment");
		//	Запись.ЗаписатьНачалоЭлемента("Packing-Sequence");
		//		Запись.ЗаписатьНачалоЭлемента("PackageId");
		//		Запись.ЗаписатьТекст(XMLСтрока(1));
		//		Запись.ЗаписатьКонецЭлемента();
		//	Запись.ЗаписатьКонецЭлемента();
		//Запись.ЗаписатьКонецЭлемента();
	КонецЦикла;
	Выборка=ПакетЗапросов[1].Выбрать();
	Запись.ЗаписатьНачалоЭлемента("DespatchAdvice-Lines");
	Пока Выборка.Следующий() Цикл
		Запись.ЗаписатьНачалоЭлемента("Line");
		Запись.ЗаписатьНачалоЭлемента("Line-Item");
		Запись.ЗаписатьНачалоЭлемента("LineNumber");
		Запись.ЗаписатьТекст(XMLСтрока(Выборка.LineNumber));
		Запись.ЗаписатьКонецЭлемента();
		//Запись.ЗаписатьНачалоЭлемента("OrderLineNumber");
		//Запись.ЗаписатьТекст(XMLСтрока(Выборка.OrderLineNumber));
		//Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("EAN");
		Запись.ЗаписатьТекст(Строка(Выборка.Штрихкод));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("DespatchedQuantity");
		Запись.ЗаписатьТекст(XMLСтрока(Выборка.DespatchedQuantity));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("ItemDescription");
		Запись.ЗаписатьТекст(XMLСтрока(Выборка.НоменклатураНаименование));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("UnitGrossPrice");
		Запись.ЗаписатьТекст(XMLСтрока(Выборка.ЦенаСНДС));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("GrossAmount");
		Запись.ЗаписатьТекст(XMLСтрока(Выборка.СуммаСНДС));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("CountryOfOriginCode");
		Запись.ЗаписатьТекст(СокрЛП(Выборка.КодСтраны));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("CustomsDeclarationNumber");
		Запись.ЗаписатьТекст(СокрЛП(Выборка.НомерГТД));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();
	КонецЦикла;
	Запись.ЗаписатьКонецЭлемента();
	Запись.ЗаписатьКонецЭлемента();
	Возврат Запись.Закрыть();
КонецФункции

Функция ОтправитьПодтверждениеОтгрузкиАшан(ДокументРеализации)
	Запрос=Новый Запрос;
	Запрос.Текст=ТекстЗапросаПодтверждениеОтгрузки();
	Запрос.УстановитьПараметр("Ссылка",ДокументРеализации);
	ПакетЗапросов=Запрос.ВыполнитьПакет();
	Если ПакетЗапросов[0].Пустой() Тогда
		Сообщить("Не смог найти у данного документа реализации ссылку на заказ клиента EDI");
		Возврат Неопределено;
	КонецЕсли;
	Если ПакетЗапросов[1].Пустой() Тогда
		Сообщить("Не смог сопоставить строки реализации и заказа клиента EDI");
		Возврат Неопределено;
	КонецЕсли;
	Запись=Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	Запись.ЗаписатьНачалоЭлемента("Document-DespatchAdvice");
	Выборка=ПакетЗапросов[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись.ЗаписатьНачалоЭлемента("DespatchAdvice-Header");
		Запись.ЗаписатьНачалоЭлемента("DespatchAdviceNumber");
		Запись.ЗаписатьТекст(ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(Выборка.DespatchAdviceNumber,Ложь,Истина));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("DespatchAdviceDate");
		Запись.ЗаписатьТекст(Формат(Выборка.DespatchAdviceDate, "ДФ=yyyy-MM-dd"));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("EstimatedDeliveryDate");
		Запись.ЗаписатьТекст(Формат(Выборка.EstimatedDeliveryDate, "ДФ=yyyy-MM-dd"));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("BuyerOrderNumber");
		Запись.ЗаписатьТекст(Выборка.BuyerOrderNumber);
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("DespatchAdvice-Parties");
		Запись.ЗаписатьНачалоЭлемента("Buyer");
		Запись.ЗаписатьНачалоЭлемента("ILN");
		Запись.ЗаписатьТекст(Выборка.ПокупательGLN);
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("Seller");
		Запись.ЗаписатьНачалоЭлемента("ILN");
		Запись.ЗаписатьТекст(Выборка.ПоставщикGLN);
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("DeliveryPoint");
		Запись.ЗаписатьНачалоЭлемента("ILN");
		Запись.ЗаписатьТекст(Выборка.МестоДоставкиGLN);
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("DespatchAdvice-Consignment");
		Запись.ЗаписатьНачалоЭлемента("Packing-Sequence");
		Запись.ЗаписатьНачалоЭлемента("PackageId");
		Запись.ЗаписатьТекст(1);
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();
	КонецЦикла;
	Выборка=ПакетЗапросов[1].Выбрать();
	Запись.ЗаписатьНачалоЭлемента("DespatchAdvice-Lines");
	Пока Выборка.Следующий() Цикл
		Запись.ЗаписатьНачалоЭлемента("Line");
		Запись.ЗаписатьНачалоЭлемента("Line-Item");
		Запись.ЗаписатьНачалоЭлемента("LineNumber");
		Запись.ЗаписатьТекст(Выборка.LineNumber);
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("OrderLineNumber");
		Запись.ЗаписатьТекст(Выборка.OrderLineNumber);
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("EAN");
		Запись.ЗаписатьТекст(Строка(Выборка.Штрихкод));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("DespatchedQuantity");
		Запись.ЗаписатьТекст(XMLСтрока(Выборка.DespatchedQuantity));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();
	КонецЦикла;
	Запись.ЗаписатьКонецЭлемента();
	Запись.ЗаписатьНачалоЭлемента("DespatchAdvice-Summary");
	
	Запись.ЗаписатьКонецЭлемента();	
	Запись.ЗаписатьКонецЭлемента();
	Возврат Запись.Закрыть();
	
КонецФункции

Функция   ТекстЗапросаПодтверждениеОтгрузки()
	ТекстЗапроса= "ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер КАК DespatchAdviceNumber,
	|	РеализацияТоваровУслуг.Дата КАК DespatchAdviceDate,
	|	ИБ_ЗаказыПокупателейEDI.Номер КАК BuyerOrderNumber,
	|	ИБ_ЗаказыПокупателейEDI.Дата КАК BuyerOrderDate,
	|	ИБ_ЗаказыПокупателейEDI.ДатаДоставки КАК EstimatedDeliveryDate,
	|	ИБ_ЗаказыПокупателейEDI.НомерДоговора КАК ContractNumber,
	|	ИБ_ЗаказыПокупателейEDI.ПоставщикGLN КАК ПоставщикGLN,
	|	ИБ_ЗаказыПокупателейEDI.КонтрагентEDI.GLN КАК ПокупательGLN,
	|	ИБ_ЗаказыПокупателейEDI.ПлательщикGLN КАК ПлательщикGLN,
	|	ИБ_ЗаказыПокупателейEDI.МестоДоставкиGLN КАК МестоДоставкиGLN,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.Валюта.Наименование КАК СТРОКА(3)) КАК Валюта
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИБ_ЗаказыПокупателейEDI КАК ИБ_ЗаказыПокупателейEDI
	|		ПО РеализацияТоваровУслуг.ЗаказКлиента = ИБ_ЗаказыПокупателейEDI.Заказ1С
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугВидыЗапасов.НомерСтроки КАК LineNumber,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	РеализацияТоваровУслугВидыЗапасов.Количество КАК DespatchedQuantity,
	|	ИБ_ЗаказыПокупателейEDIТовары.НомерСтрокиУПокупателя КАК OrderLineNumber,
	|	РеализацияТоваровУслугВидыЗапасов.СуммаСНДС КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслугВидыЗапасов.СуммаСНДС / РеализацияТоваровУслугВидыЗапасов.КоличествоУпаковок КАК ЧИСЛО(15, 2)) КАК ЦенаСНДС,
	|	ИБ_ЗаказыПокупателейEDIТовары.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслугВидыЗапасов.НомерГТД.Представление КАК НомерГТД,
	|	ИБ_ЗаказыПокупателейEDIТовары.НаименованиеНоменклатуры КАК НоменклатураНаименование,
	|	ЕСТЬNULL(РеализацияТоваровУслугВидыЗапасов.НомерГТД.СтранаПроисхождения.КодАльфа2, ""RU"") КАК КодСтраны
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВидыЗапасов КАК РеализацияТоваровУслугВидыЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИБ_ЗаказыПокупателейEDI.Товары КАК ИБ_ЗаказыПокупателейEDIТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|			ПО ИБ_ЗаказыПокупателейEDIТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|		ПО РеализацияТоваровУслугВидыЗапасов.Ссылка.ЗаказКлиента = ИБ_ЗаказыПокупателейEDIТовары.Ссылка.Заказ1С
	|			И РеализацияТоваровУслугВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура = ИБ_ЗаказыПокупателейEDIТовары.Номенклатура
	|ГДЕ
	|	РеализацияТоваровУслугВидыЗапасов.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	LineNumber";
	Возврат ТекстЗапроса;	
КонецФункции
#КонецОбласти 

#Область  ОТВЕТ_НА_ЗАКАЗ

Функция   ТекстЗапросаОтветНаЗаказ()
	ТекстЗапроса=  "ВЫБРАТЬ
	               |	ЗаказКлиента.Номер КАК OrderResponseNumber,
	               |	ЗаказКлиента.Дата КАК OrderResponseDate,
	               |	ИБ_ЗаказыПокупателейEDI.Номер КАК OrderNumber,
	               |	ИБ_ЗаказыПокупателейEDI.Дата КАК OrderDate,
	               |	ИБ_ЗаказыПокупателейEDI.ДатаДоставки КАК ExpectedDeliveryDate,
	               |	ИБ_ЗаказыПокупателейEDI.НомерДоговора КАК ContractNumber,
	               |	ИБ_ЗаказыПокупателейEDI.ПоставщикGLN КАК ПоставщикGLN,
	               |	ИБ_ЗаказыПокупателейEDI.КонтрагентEDI.GLN КАК ПокупательGLN,
	               |	ИБ_ЗаказыПокупателейEDI.ПлательщикGLN КАК ПлательщикGLN,
	               |	ИБ_ЗаказыПокупателейEDI.МестоДоставкиGLN КАК МестоДоставкиGLN,
	               |	ВЫРАЗИТЬ(ЗаказКлиента.Валюта.Наименование КАК СТРОКА(3)) КАК Валюта,
	               |	МИНИМУМ(ВЫБОР
	               |			КОГДА ЕСТЬNULL(ЗаказКлиентаТовары.Количество, 0) = ИБ_ЗаказыПокупателейEDIТовары.Количество
	               |				ТОГДА ЛОЖЬ
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ) КАК ЕстьИзменения,
	               |	КОЛИЧЕСТВО(ЗаказКлиентаТовары.НомерСтроки) КАК TotalLines,
	               |	ЗаказКлиента.СуммаДокумента КАК TotalOrderedAmount
	               |ИЗ
	               |	Документ.ИБ_ЗаказыПокупателейEDI КАК ИБ_ЗаказыПокупателейEDI
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИБ_ЗаказыПокупателейEDI.Товары КАК ИБ_ЗаказыПокупателейEDIТовары
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	               |				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	               |				ПО (ЗаказКлиента.Ссылка = ЗаказКлиентаТовары.Ссылка)
	               |			ПО ИБ_ЗаказыПокупателейEDIТовары.Ссылка.Заказ1С = ЗаказКлиентаТовары.Ссылка
	               |				И ИБ_ЗаказыПокупателейEDIТовары.Номенклатура = ЗаказКлиентаТовары.Номенклатура
	               |		ПО ИБ_ЗаказыПокупателейEDI.Ссылка = ИБ_ЗаказыПокупателейEDIТовары.Ссылка
	               |ГДЕ
	               |	ЗаказКлиента.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ИБ_ЗаказыПокупателейEDI.ПлательщикGLN,
	               |	ИБ_ЗаказыПокупателейEDI.ПоставщикGLN,
	               |	ИБ_ЗаказыПокупателейEDI.КонтрагентEDI.GLN,
	               |	ВЫРАЗИТЬ(ЗаказКлиента.Валюта.Наименование КАК СТРОКА(3)),
	               |	ИБ_ЗаказыПокупателейEDI.МестоДоставкиGLN,
	               |	ЗаказКлиента.Номер,
	               |	ЗаказКлиента.Дата,
	               |	ИБ_ЗаказыПокупателейEDI.Номер,
	               |	ИБ_ЗаказыПокупателейEDI.ДатаДоставки,
	               |	ИБ_ЗаказыПокупателейEDI.Дата,
	               |	ИБ_ЗаказыПокупателейEDI.НомерДоговора,
	               |	ЗаказКлиента.СуммаДокумента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИБ_ЗаказыПокупателейEDIТовары.НомерСтрокиУПокупателя КАК OrderLineNumber,
	               |	ВЫБОР
	               |		КОГДА ЗаказКлиентаТовары.Отменено = ИСТИНА
	               |			ТОГДА 7
	               |		КОГДА ЗаказКлиентаТовары.Количество = ИБ_ЗаказыПокупателейEDIТовары.Количество
	               |			ТОГДА 5
	               |		ИНАЧЕ 3
	               |	КОНЕЦ КАК LineItemStatus,
	               |	ЗаказКлиентаТовары.НомерСтроки КАК LineNumber,
	               |	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	               |	ИБ_ЗаказыПокупателейEDIТовары.Количество КАК OrderedQuantity,
	               |	ЗаказКлиентаТовары.СуммаСНДС КАК СуммаСНДС,
	               |	ВЫРАЗИТЬ(ЗаказКлиентаТовары.СуммаСНДС / ЗаказКлиентаТовары.Количество КАК ЧИСЛО(15, 2)) КАК ЦенаСНДС,
	               |	ИБ_ЗаказыПокупателейEDIТовары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК UnitOfMeasure,
	               |	ИБ_ЗаказыПокупателейEDIТовары.НаименованиеНоменклатуры КАК ItemDescription,
	               |	ВЫБОР
	               |		КОГДА ЗаказКлиентаТовары.Отменено
	               |			ТОГДА 0
	               |		ИНАЧЕ ЗаказКлиентаТовары.Количество
	               |	КОНЕЦ КАК QuantityToBeDelivered,
	               |	ИБ_ЗаказыПокупателейEDIТовары.Количество - ВЫБОР
	               |		КОГДА ЗаказКлиентаТовары.Отменено
	               |			ТОГДА 0
	               |		ИНАЧЕ ЗаказКлиентаТовары.Количество
	               |	КОНЕЦ КАК QuantityDifference,
	               |	ИБ_ЗаказыПокупателейEDIТовары.ЦенаБезНДС КАК Цена,
	               |	ЗаказКлиентаТовары.СуммаНДС КАК СуммаНДС
	               |ИЗ
	               |	Документ.ИБ_ЗаказыПокупателейEDI.Товары КАК ИБ_ЗаказыПокупателейEDIТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	               |		ПО ИБ_ЗаказыПокупателейEDIТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	               |		ПО ИБ_ЗаказыПокупателейEDIТовары.Ссылка.Заказ1С = ЗаказКлиентаТовары.Ссылка
	               |			И ИБ_ЗаказыПокупателейEDIТовары.Номенклатура = ЗаказКлиентаТовары.Номенклатура
	               |ГДЕ
	               |	ЗаказКлиентаТовары.Ссылка = &Ссылка" ;
	Возврат ТекстЗапроса ;	
КонецФункции 

Функция   ОтправитьОтветНаЗаказ(ЗаказКлиента) Экспорт
	Возврат ОтветНаЗаказКоммарч(ЗаказКлиента);;	
КонецФункции 

Функция   ОтветНаЗаказКоммарч(ЗаказКлиента)
	Запрос=Новый Запрос;
	Запрос.Текст=ТекстЗапросаОтветНаЗаказ();
	Запрос.УстановитьПараметр("Ссылка",ЗаказКлиента);
	ПакетЗапросов=Запрос.ВыполнитьПакет();
	//Если ПакетЗапросов[0].Пустой() Тогда
	//	Сообщить("Не смог найти у данного заказа клиента ссылку на электроонный заказ клиента EDI");
	//	Возврат Неопределено;
	//КонецЕсли;
	//Если ПакетЗапросов[1].Пустой() Тогда
	//	Сообщить("Не смог сопоставить строки заказо и заказа клиента EDI");
	//	Возврат Неопределено;
	//КонецЕсли;
	Запись=Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	Запись.ЗаписатьНачалоЭлемента("Document-OrderResponse");
	Выборка=ПакетЗапросов[0].Выбрать();
	TotalLines=0;
	TotalOrderedAmount=0;
	Пока Выборка.Следующий() Цикл
		Запись.ЗаписатьНачалоЭлемента("OrderResponse-Header");
		Запись.ЗаписатьНачалоЭлемента("OrderResponseNumber");
		Запись.ЗаписатьТекст(ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(Выборка.OrderResponseNumber,Ложь,Истина));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("OrderResponseDate");
		Запись.ЗаписатьТекст(Формат(Выборка.OrderResponseDate, "ДФ=yyyy-MM-dd"));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("ExpectedDeliveryDate");
		Запись.ЗаписатьТекст(Формат(Выборка.ExpectedDeliveryDate, "ДФ=yyyy-MM-dd"));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("ExpectedDeliveryTime");
		Запись.ЗаписатьТекст(Формат(Выборка.ExpectedDeliveryDate, "ДФ=hh:mm"));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("OrderNumber");
		Запись.ЗаписатьТекст(Выборка.OrderNumber);
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("OrderDate");
		Запись.ЗаписатьТекст(Формат(Выборка.OrderDate, "ДФ=yyyy-MM-dd"));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("Currency");
		Запись.ЗаписатьТекст(Выборка.Валюта);
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("ResponseType");
		ResponseType=Строка(?(Выборка.TotalLines=0,27,?(Выборка. ЕстьИзменения,4,29)));
		Запись.ЗаписатьТекст(ResponseType);
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("DocumentFunctionCode");
		Запись.ЗаписатьТекст("9");
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();     //OrderResponse-Header
		Запись.ЗаписатьНачалоЭлемента("OrderResponse-Parties");
		Запись.ЗаписатьНачалоЭлемента("Buyer");
		Запись.ЗаписатьНачалоЭлемента("ILN");
		Запись.ЗаписатьТекст(Выборка.ПокупательGLN);
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();     //Buyer
		Запись.ЗаписатьНачалоЭлемента("Seller");
		Запись.ЗаписатьНачалоЭлемента("ILN");
		Запись.ЗаписатьТекст(Выборка.ПоставщикGLN);
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();     //Seller
		Запись.ЗаписатьНачалоЭлемента("DeliveryPoint");
		Запись.ЗаписатьНачалоЭлемента("ILN");
		Запись.ЗаписатьТекст(Выборка.МестоДоставкиGLN);
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();     //DeliveryPoint"
		TotalLines=Выборка.TotalLines;
		TotalOrderedAmount=Выборка.TotalOrderedAmount;
		Запись.ЗаписатьКонецЭлемента();  //OrderResponse-Parties
	КонецЦикла;
	Выборка=ПакетЗапросов[1].Выбрать();
	Запись.ЗаписатьНачалоЭлемента("OrderResponse-Lines");
	Пока Выборка.Следующий() Цикл
		Запись.ЗаписатьНачалоЭлемента("Line");
		Запись.ЗаписатьНачалоЭлемента("Line-Item");
		Запись.ЗаписатьНачалоЭлемента("LineNumber");
		Запись.ЗаписатьТекст(XMLСтрока(Выборка.LineNumber));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("OrderLineNumber");
		Запись.ЗаписатьТекст(XMLСтрока(Выборка.OrderLineNumber));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("EAN");
		Запись.ЗаписатьТекст(Строка(Выборка.Штрихкод));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("LineItemStatus");
		Запись.ЗаписатьТекст(Строка(Выборка.LineItemStatus));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("ItemDescription");
		Запись.ЗаписатьТекст(XMLСтрока(Выборка.ItemDescription));
		Запись.ЗаписатьКонецЭлемента();		
		Запись.ЗаписатьНачалоЭлемента("OrderedQuantity");
		Запись.ЗаписатьТекст(Формат(Выборка.OrderedQuantity,"ЧДЦ=3; ЧРД=.; ЧГ=0"));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("QuantityToBeDelivered");
		Запись.ЗаписатьТекст(Формат(Выборка.QuantityToBeDelivered,"ЧДЦ=3; ЧРД=.; ЧГ=0"));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("QuantityDifference");
		Запись.ЗаписатьТекст(Формат(Выборка.QuantityDifference,"ЧДЦ=3; ЧРД=.; ЧГ=0"));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("UnitOfMeasure");
		Запись.ЗаписатьТекст(XMLСтрока(Выборка.UnitOfMeasure));
		Запись.ЗаписатьКонецЭлемента();
		 Запись.ЗаписатьНачалоЭлемента("OrderedUnitNetPrice");
		Запись.ЗаписатьТекст(Формат(Выборка.Цена,"ЧДЦ=3; ЧРД=.; ЧГ=0"));
		Запись.ЗаписатьКонецЭлемента();
		 Запись.ЗаписатьНачалоЭлемента("OrderedUnitGrossPrice");
		Запись.ЗаписатьТекст(Формат(Выборка.ЦенаСНДС,"ЧДЦ=3; ЧРД=.; ЧГ=0"));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьНачалоЭлемента("GrossAmount");
		Запись.ЗаписатьТекст(Формат(Выборка.СуммаСНДС,"ЧДЦ=3; ЧРД=.; ЧГ=0"));
		Запись.ЗаписатьКонецЭлемента();
		Запись.ЗаписатьКонецЭлемента();    //Line-Item
		Запись.ЗаписатьКонецЭлемента();    //Line
	КонецЦикла;
	Запись.ЗаписатьКонецЭлемента();  //  OrderResponse-Lines
	Запись.ЗаписатьНачалоЭлемента("OrderResponse-Summary");
	Запись.ЗаписатьНачалоЭлемента("TotalLines");
	Запись.ЗаписатьТекст(XMLСтрока(TotalLines));
	Запись.ЗаписатьКонецЭлемента();
	//Запись.ЗаписатьНачалоЭлемента("TotalOrderedAmount");
	//Запись.ЗаписатьТекст(XMLСтрока(TotalOrderedAmount));
	//Запись.ЗаписатьКонецЭлемента();
	Запись.ЗаписатьКонецЭлемента();          //OrderResponse-Lines
	
	Запись.ЗаписатьКонецЭлемента();   //Document-OrderResponse
	Возврат Запись.Закрыть();
	
КонецФункции
#КонецОбласти 
